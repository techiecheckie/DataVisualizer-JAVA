/*
 * Copyright (C) 2015 banjum
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.ghc.foss.frames;

import com.ghc.foss.ds.*;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.*;
/**
 *
 * @author banjum
 */
public class Selector extends javax.swing.JFrame {

    /**
     * Creates new form Input
     */
    public Selector() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDS = new javax.swing.ButtonGroup();
        jRadioButtonStack = new javax.swing.JRadioButton();
        jRadioButtonQueue = new javax.swing.JRadioButton();
        jRadioButtonHeap = new javax.swing.JRadioButton();
        jRadioButtonTree = new javax.swing.JRadioButton();
        jLabelChoose = new javax.swing.JLabel();
        jButtonNext = new javax.swing.JButton();
        jLabelPicture = new javax.swing.JLabel();
        jRadioButtonList = new javax.swing.JRadioButton();

        buttonGroupDS.add(jRadioButtonStack);
        buttonGroupDS.add(jRadioButtonQueue);
        buttonGroupDS.add(jRadioButtonHeap);
        buttonGroupDS.add(jRadioButtonTree);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DS Selector");

        jRadioButtonStack.setText("Stack");
        jRadioButtonStack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonStackActionPerformed(evt);
            }
        });

        jRadioButtonQueue.setText("Queue");
        jRadioButtonQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonQueueActionPerformed(evt);
            }
        });

        jRadioButtonHeap.setText("Binary Heap");
        jRadioButtonHeap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHeapActionPerformed(evt);
            }
        });

        jRadioButtonTree.setText("Binary Search Tree");
        jRadioButtonTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTreeActionPerformed(evt);
            }
        });

        jLabelChoose.setText("Select a Data Structure");

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jLabelPicture.setText("Data Structure");
        jLabelPicture.setToolTipText("Data Structure Image");

        jRadioButtonList.setText("List");
        jRadioButtonList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelChoose)
                            .addComponent(jRadioButtonTree)
                            .addComponent(jRadioButtonHeap)
                            .addComponent(jRadioButtonQueue)
                            .addComponent(jRadioButtonStack)
                            .addComponent(jRadioButtonList))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabelPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelChoose)
                        .addGap(31, 31, 31)
                        .addComponent(jRadioButtonStack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonHeap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonTree)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonNext)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + STACK_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonStackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonStackActionPerformed
        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + STACK_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));
        dataStructureIdentifier=DS.STACK;        
    }//GEN-LAST:event_jRadioButtonStackActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        
        try
        {
            if(dataStructureIdentifier==DS.STACK)
            {
                new Visualizer(new Stack(),"Stack",false,this).setVisible(true);
            }
            if(dataStructureIdentifier==DS.QUEUE)
            {
                new Visualizer(new Queue(),"Queue",false,this).setVisible(true);
            }
            if(dataStructureIdentifier==DS.LIST)
            {
                new Visualizer(new List(),"List",true,this).setVisible(true);
            }
            if(dataStructureIdentifier==DS.BINARY_HEAP)
            {
                new Visualizer(new BinaryHeap(),"Binary Min Heap",false,this).setVisible(true);
            }
            if(dataStructureIdentifier==DS.BINARY_SEARCH_TREE)
            {
                new Visualizer(new BinaryTree(),"Binary Search Tree",true,this).setVisible(true);
            }
            
            setVisible(false);        
        }
        catch(Exception e){
            System.out.println("Exception thrown  :" + e);
        }
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jRadioButtonQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonQueueActionPerformed
        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + QUEUE_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));
        dataStructureIdentifier=DS.QUEUE;
    }//GEN-LAST:event_jRadioButtonQueueActionPerformed

    private void jRadioButtonHeapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHeapActionPerformed
        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + HEAP_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));
        dataStructureIdentifier=DS.BINARY_HEAP;
    }//GEN-LAST:event_jRadioButtonHeapActionPerformed

    private void jRadioButtonTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTreeActionPerformed
        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + TREE_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));
        dataStructureIdentifier=DS.BINARY_SEARCH_TREE;
    }//GEN-LAST:event_jRadioButtonTreeActionPerformed

    private void jRadioButtonListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonListActionPerformed
        Image img = Toolkit.getDefaultToolkit().createImage(getClass().getResource(IMAGE_PATH + LIST_IMAGE ));
        Image dimg = img.getScaledInstance( IMG_DIM, IMG_DIM, Image.SCALE_SMOOTH);
        jLabelPicture.setIcon(new ImageIcon(dimg));
        dataStructureIdentifier=DS.LIST;
    }//GEN-LAST:event_jRadioButtonListActionPerformed

   
    //Constalts
    private final String IMAGE_PATH = "/com/ghc/foss/images/";
    private final String STACK_IMAGE ="stack.png";
    private final String QUEUE_IMAGE ="queue.png";
    private final String HEAP_IMAGE ="heap.png";
    private final String TREE_IMAGE ="tree.png";
    private final String LIST_IMAGE="list.png";
    private final Integer IMG_DIM = 175;
    
    //Enum
    public enum DS {
        STACK, QUEUE, BINARY_SEARCH_TREE, BINARY_HEAP, LIST
    }
    static DS dataStructureIdentifier=DS.STACK;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDS;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JLabel jLabelChoose;
    private javax.swing.JLabel jLabelPicture;
    private javax.swing.JRadioButton jRadioButtonHeap;
    private javax.swing.JRadioButton jRadioButtonList;
    private javax.swing.JRadioButton jRadioButtonQueue;
    private javax.swing.JRadioButton jRadioButtonStack;
    private javax.swing.JRadioButton jRadioButtonTree;
    // End of variables declaration//GEN-END:variables
}
